/*

https://github.com/t-o-k/Maxima-bezier/rational_bezier_surface_3d.mac

Copyright (c) 2020 Tor Olav Kristensen, http://subcube.com

Use of this source code is governed by the GNU Lesser General Public License version 3, which can be found in the LICENSE file.

*/

kill(all);

load("draw");

load("bezier");

tau: 2*%pi;

angle: tau/4;

w: matrix([ 1, cos(angle/2), 1 ]);

weights: transpose(w).w;

/*
The 9 points; <x, y, z> in the control grid:

< 0, +Rmaj+Rmin,     0>   <+Rmaj+Rmin, +Rmaj+Rmin,     0>   <+Rmaj+Rmin, 0,     0>
< 0, +Rmaj+Rmin, +Rmin>   <+Rmaj+Rmin, +Rmaj+Rmin, +Rmin>   <+Rmaj+Rmin, 0, +Rmin>
< 0, +Rmaj     , +Rmin>   <+Rmaj     , +Rmaj     , +Rmin>   <+Rmaj     , 0, +Rmin>

This will create a surface that is 1/16 of the surface of a torus, or 1/8 of the surface of a sphere if Rmaj is 0.
*/

points_x:
    matrix(
        [ 0, +Rmaj+Rmin, +Rmaj+Rmin ],
        [ 0, +Rmaj+Rmin, +Rmaj+Rmin ],
        [ 0, +Rmaj     , +Rmaj      ]
    )
;

points_y:
    matrix(
        [ +Rmaj+Rmin, +Rmaj+Rmin, 0 ],
        [ +Rmaj+Rmin, +Rmaj+Rmin, 0 ],
        [ +Rmaj     , +Rmaj     , 0 ]
    )
;

points_z:
    matrix(
        [     0,     0,     0 ],
        [ +Rmin, +Rmin, +Rmin ],
        [ +Rmin, +Rmin, +Rmin ]
    )
;

define(f_x(u, v), rational_bezier_function_2a(points_x, weights, u, v));

define(f_y(u, v), rational_bezier_function_2a(points_y, weights, u, v));

define(f_z(u, v), rational_bezier_function_2a(points_z, weights, u, v));

Rmaj: 0;
Rmin: 1;

f_x(u, v);

f_y(u, v);

f_z(u, v);

plot3d(
    [ f_x(u, v), f_y(u, v), f_z(u, v) ],
    [ u, 0, 1 ],
    [ v, 0, 1 ],
    same_xyz
);+

Rmaj: 2;
Rmin: 1;

plot3d(
    [ f_x(u, v), f_y(u, v), f_z(u, v) ],
    [ u, 0, 1 ],
    [ v, 0, 1 ],
    same_xyz
);
