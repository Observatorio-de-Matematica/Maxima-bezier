/*

https://github.com/t-o-k/Maxima-bezier/bezier.mac

Copyright (c) 2020 Tor Olav Kristensen, http://subcube.com

Use of this source code is governed by the GNU Lesser General Public License version 3, which can be found in the LICENSE file.

*/

load(bernstein);

basis_functions_1a(deg_s, s) :=
    matrix(
       makelist(bernstein_poly(i, deg_s, s), i, 0, deg_s)
    )
;

basis_functions_2a(deg_u, deg_v, u, v) :=
   block(
       [ u_fns, v_fns ],
       u_fns(u) := basis_functions_1a(deg_u, u),
       v_fns(v) := basis_functions_1a(deg_v, v),
       transpose(v_fns(v)).u_fns(u)
   )
;

bezier_function_1a(weights, s) :=
    block(
        [ m_size, size_s, s_fns, s_one ],
        m_size: matrix_size(weights),
        size_s: m_size[2],
        s_fns(s) := basis_functions_1a(size_s - 1, s),
        s_one: matrix(makelist(1, i, 1, size_s)),
        (weights*s_fns(s)).transpose(s_one)
   )
;

bezier_function_2a(weights, u, v) :=
    block(
        [ m_size, size_u, size_v, uv_fn, u_one, v_ones ],
        m_size: matrix_size(weights),
        size_u: m_size[2],
        size_v: m_size[1],
        uv_fns(u, v) := basis_functions_2a(size_u - 1, size_v - 1, u, v),
        u_one: matrix(makelist(1, i, 1, size_u)),
        v_one: matrix(makelist(1, i, 1, size_v)),
        v_one.(weights*uv_fns(u, v)).transpose(u_one)
    )
;
